service: mystery-drop-api

# Create an optimized package for our functions 
package:
  individually: false

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'us-east-1'}
  stage: dev
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - s3:*
       Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'
        - Fn::Join:
          - ''
          - - !ImportValue '${self:custom.sstApp}-TableArn'
            - '/index/*'
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
        - https://mysterydrop.app
        - https://dev.mysterydrop.app
        - https://test-cors.org
        - https://www.test-cors.org
      allowedHeaders:
        - Content-Type
        - Authorization
        - cache-control
        - pragma
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      maxAge: 3000
      allowCredentials: true
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorize
    # authorizers:
    #   serviceAuthorizer:
    #     identitySource: $request.header.Authorization
    #     issuerUrl: 
    #       Fn::Join:
    #       - ''
    #       - - 'https://cognito-idp.'
    #         - '${opt:region, self:provider.region}'
    #         - '.amazonaws.com/'
    #         - !ImportValue '${self:custom.sstApp}-UserPoolId'
    #     audience:
    #       - !ImportValue '${self:custom.sstApp}-UserPoolClientId'
  environment:
    DYNAMODB_TABLE: !ImportValue '${self:custom.sstApp}-TableName'
    CREATOR_DROP_BUCKET_NAME: ${self:custom.bucketName}

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-mystery-drop-infra
  customDomain:
    domainName: ${self:custom.stage}.ext-api.mysterydrop.app
    basePath: app
    endpointType: regional
    apiType: http
    createRoute53Record: true
  bucketName: !ImportValue '${self:custom.sstApp}-CreatorDropBucketName'

functions:
  defaultCORS:
    handler: src/functions/dropHandler.defaultCORS
    events:
      - httpApi:
          path: /{proxy+}
          method: options
  nonce:
    handler: src/functions/dropHandler.nonce
    events:
      - httpApi:
          path: /v1/sessions
          method: get
  login:
    handler: src/functions/dropHandler.login
    environment:
      JWT_SECRET: ${env:JWT_SECRET}
      JWT_EXPIRATION_TIME: ${env:JWT_EXPIRATION_TIME}
    events:
      - httpApi:
          path: /v1/sessions
          method: post
  helloAuth:
    handler: src/functions/dropHandler.helloAuth
    environment:
      JWT_SECRET: ${env:JWT_SECRET}
    events:
      - httpApi:
          path: /v1/helloAuth
          method: get
          authorizer:
            name: customAuthorizer
  authorize:
    handler: src/functions/authorize.handler
    environment:
      JWT_SECRET: ${env:JWT_SECRET}
  httpInitiateUpload:
    handler: src/functions/dropHandler.initiateUpload
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          Fn::Join: ['', ['arn:aws:s3:::', "${self:custom.bucketName}", '/*'] ]
    events:
      - httpApi:
          path: /v1/initiateUpload
          method: post
          authorizer:
            name: customAuthorizer
  getDrops:
    handler: src/functions/dropHandler.getDrops
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      TOKEN_CONTRACT_ADDRESS : ${env:TOKEN_CONTRACT_ADDRESS}
      RARIBLE_API_URL_BASE : ${env:RARIBLE_API_URL_BASE}
    events:
      - httpApi:
          path: /v1/getDrops
          method: get
          authorizer:
            name: customAuthorizer
  publishDrop:
    handler: src/functions/dropHandler.publish
    events:
      - httpApi:
          path: /v1/publishDrop
          method: post
          authorizer:
            name: customAuthorizer
  getPublicDrops:
    handler: src/functions/dropHandler.getPublicDrops
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      TOKEN_CONTRACT_ADDRESS : ${env:TOKEN_CONTRACT_ADDRESS}
      RARIBLE_API_URL_BASE : ${env:RARIBLE_API_URL_BASE}
    events:
      - httpApi:
          path: /v1/public/getDrops
          method: get
  prepareForMinting:
    handler: src/functions/dropHandler.prepareForMinting
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      TOKEN_EXTERNAL_URL_BASE : ${env:TOKEN_EXTERNAL_URL_BASE}
      TOKEN_CONTRACT_ADDRESS : ${env:TOKEN_CONTRACT_ADDRESS}
      CHAIN_ID : ${env:CHAIN_ID}
    events:
      - httpApi:
          path: /v1/mint
          method: get
          authorizer:
            name: customAuthorizer
  lazyMint:
    handler: src/functions/dropHandler.lazyMint
    environment:
      TOKEN_CONTRACT_ADDRESS : ${env:TOKEN_CONTRACT_ADDRESS}
      RARIBLE_API_URL_BASE : ${env:RARIBLE_API_URL_BASE}
    events:
      - httpApi:
          path: /v1/mint
          method: post
          authorizer:
            name: customAuthorizer
  reveal:
    handler: src/functions/dropHandler.reveal
    environment:
      RARIBLE_API_URL_BASE : ${env:RARIBLE_API_URL_BASE}
      PINATA_API_KEY : ${env:PINATA_API_KEY}
      PINATA_SECRET_KEY : ${env:PINATA_SECRET_KEY}
    events:
      - httpApi:
          path: /v1/reveal
          method: post
          authorizer:
            name: customAuthorizer
  s3ProcessUploadedPhoto:
    handler: src/functions/dropHandler.s3ProcessUploadedPhoto
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: 
          - !ImportValue '${self:custom.sstApp}-TableArn'
          - Fn::Join:
            - ''
            - - !ImportValue '${self:custom.sstApp}-TableArn'
              - '/index/*'
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:HeadObject
        Resource:
          Fn::Join: ['', ['arn:aws:s3:::', "${self:custom.bucketName}", '/*'] ]
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true